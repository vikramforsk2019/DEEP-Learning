# -*- coding: utf-8 -*-
"""DL_RNN_LSTM_Time_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qYPonPT2qV_V8Y1Mjr0GnZeiIQjBNzFB
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import os
os.getcwd()
os.chdir('/content/drive/My Drive/DL_RNN')

apple_training_complete = pd.read_csv('apple_training.csv')

apple_training_complete.shape

apple_training_processed = apple_training_complete.iloc[:, 1:2].values

apple_training_processed.shape

from sklearn.preprocessing import MinMaxScaler  
scaler = MinMaxScaler(feature_range = (0, 1))

apple_training_scaled = scaler.fit_transform(apple_training_processed)

apple_training_scaled.shape

apple_training_processed #data before scaling

apple_training_scaled

features_set = []  
labels = []  
for i in range(60, 1260):  
    features_set.append(apple_training_scaled[i-60:i,0])
    labels.append(apple_training_scaled[i, 0])

features_set

features_set, labels = np.array(features_set), np.array(labels)

features_set.shape

features_set = np.reshape(features_set, (features_set.shape[0], features_set.shape[1], 1))

features_set.shape

from keras.models import Sequential  
from keras.layers import Dense  
from keras.layers import LSTM  
from keras.layers import Dropout

model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(features_set.shape[1], 1)))

model.add(Dropout(0.2))

model.summary()

model.add(LSTM(units=50, return_sequences=True))  
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))  
model.add(Dropout(0.2))

model.add(LSTM(units=50))  
model.add(Dropout(0.2))

model.summary()

model.add(Dense(units = 1))

model.compile(optimizer = 'adam', loss = 'mean_squared_error')

model.fit(features_set, labels, epochs = 100, batch_size = 32)

"""# Testing the LSTM"""

apple_testing_complete = pd.read_csv('apple_testing.csv')  
apple_testing_processed = apple_testing_complete.iloc[:, 1:2].values

apple_testing_processed.shape

"""Converting test data into right format
For each day of January 2018, we want our feature set to contain the opening stock prices for the previous 60 days. For the 1st of January, we need the stock prices for the previous 60 days. To do so, we need to concatenate our training data and test data before preprocessing
"""

apple_total = pd.concat((apple_training_complete['Open'], apple_testing_complete['Open']), axis=0)

apple_total.shape

"""Now let's prepare our test inputs. The input for each day should contain the opening stock prices for the previous 60 days. That means we need opening stock prices for the 20 test days for the month of January 2018 and the 60 stock prices from the last 60 days for the training set."""

test_inputs = apple_total[len(apple_total) - len(apple_testing_complete) - 60:].values

test_inputs.shape

"""Scale our test data as we did in train data"""

test_inputs = test_inputs.reshape(-1,1)

test_inputs.shape



test_inputs = scaler.transform(test_inputs)

test_inputs[0]

test_features = []  
for i in range(60, 80):  
    test_features.append(test_inputs[i-60:i, 0])

test_features = np.array(test_features)

test_features.shape

test_features = np.reshape(test_features, (test_features.shape[0], test_features.shape[1], 1))

test_features.shape

predictions = model.predict(test_features)

"""Since we scaled our data, the predictions made by the LSTM are also scaled. We need to reverse the scaled prediction back to their actual values. To do so, we can use the Ã¬nverse_transform method of the scaler object we created during training."""



predictions = scaler.inverse_transform(predictions)

plt.figure(figsize=(10,6))  
plt.plot(apple_testing_processed, color='blue', label='Actual Apple Stock Price')  
plt.plot(predictions , color='red', label='Predicted Apple Stock Price')  
plt.title('Apple Stock Price Prediction')  
plt.xlabel('Date')  
plt.ylabel('Apple Stock Price')  
plt.legend()  
plt.show()

"""Conclusion
A long short-term memory network (LSTM) is one of the most commonly used neural networks for time series analysis. The ability of LSTM to remember previous information makes it ideal for such tasks. In this article, we saw how we can use LSTM for the Apple stock price prediction.
"""